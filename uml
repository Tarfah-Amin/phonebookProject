class BST {
    - BSTNode root
    - BSTNode current
    
    + BST()
    + empty(): boolean
    + clear(): void
    + full(): boolean
    + retrieve(): T
    + findKey(k: String): boolean
    + insert(k: String, val: T): boolean
    + removeKey(k: String): boolean
    - find_min(p: BSTNode<T>): BSTNode<T>
    + update(key: String, data: T): boolean
    + inOrder(): void
    - inOrder(p: BSTNode<Contact>): void
    + isPhoneExist(phone: String): boolean
    - checkPhoneInOrder(p: BSTNode<Contact>, phone: String): boolean
    + SearchFname(fname: String): LinkedList<Contact>
    - RecSearchByFirstName(p: BSTNode<T>, res: LinkedList<Contact>, fname: String): void
    + searchByPhoneNumber(phoneNumber: String): Contact
    - recSearchByPhoneNumber(p: BSTNode<T>, phoneNumber: String): Contact
    + SearchEmail(mail: String): LinkedList<Contact>
    - RecSearchByEmail(p: BSTNode<T>, res: LinkedList<Contact>, email: String): void
    + SearchDOB(dob: String): LinkedList<Contact>
    - RecSearchByDOB(p: BSTNode<T>, res: LinkedList<Contact>, dob: String): void
    + SearchAddress(add: String): LinkedList<Contact>
    - RecSearchByAddress(p: BSTNode<T>, res: LinkedList<Contact>, add: String): void
}

class BSTNode {
    + String key
    + T data
    + BSTNode left
    + BSTNode right
    
    + BSTNode(String k, T val)
    + BSTNode(String k, T val, BSTNode l, BSTNode r)
}

class Contact {
    - String name
    - String phoneNumber
    - String email
    - String address
    - String birthday
    - String notes
    + LinkedList relatedEvent
    
    + Contact()
    + Contact(String name, String phoneNumber, String email, String address, String birthday, String notes)
    + Contact(Contact c)
    + getName(): String
    + setName(String name)
    + getPhoneNumber(): String
    + setPhoneNumber(String phoneNumber)
    + getEmail(): String
    + setEmail(String email)
    + getAddress(): String
    + setAddress(String address)
    + getBirthday(): String
    + setBirthday(String birthday)
    + getNotes(): String
    + setNotes(String notes)
    + compareTo(String comparedName): int
    + compareTo(Contact comparedContact): int
    + setRelatedEvent(LinkedList relatedEvent)
    + toString(): String
}

class Event {
    - String eventTitle
    - String location
    - LocalDate eventDate
    - LocalTime startTime
    - LocalTime endTime
    - String contactName
    - boolean isEvent
    + LinkedList<Event> allEvents
    + LinkedList<Contact> contactInEvent
    
    + Event()
    + Event(String eventTitle, String location, LocalDate eventDate, LocalTime startTime, LocalTime endTime, String contactName, boolean isEvent)
    + getEventTitle(): String
    + setEventTitle(String eventTitle)
    + getLocation(): String
    + setLocation(String location)
    + getEventDate(): LocalDate
    + setEventDate(LocalDate eventDate)
    + getStartTime(): LocalTime
    + setStartTime(LocalTime startTime)
    + getEndTime(): LocalTime
    + setEndTime(LocalTime endTime)
    + getContactName(): String
    + setContactName(String contactName)
    + isIsEvent(): boolean
    + setIsEvent(boolean isEvent)
    + getContactInEvent(): LinkedList
    + toString(): String
    + setContactInvolved(Contact contactInvolved)
    + compareTo(String comparedName): int
    + compareTo(Event comparedEvent): int
}

class LinkedList {
    - Node<T> Head
    - Node<T> current
    - int size
    
    + isEmpty(): boolean
    + isFull(): boolean
    + last(): boolean
    + FindFirst()
    + FindNext()
    + update(T d)
    + retrieve(): T
    + insert(T d)
    + remove()
    + search(T d): boolean
    + dispaly()
    + AddSorted(T d)
    + AddSortedEvent(T d)
}

class Node {
    + T data
    + Node next
    
    + Node(T data)
}

class Phonebook {
    + {static} BST allContactsBST
    + {static} LinkedList EventList
    
    + Phonebook()
    + checkBeforeAdd(Contact contact): boolean
    + addContact(Contact contact)
    + addEvent(Event e)
    + deleteContact(String n)
    + DeleteAllEventsWithContact(String t, LinkedList L)
    + DeletEvent(String Titel, String n)
    + searchName(String n): Contact
    + {static}searchEventTitle(String n): Event
    + SearchFname(String n): LinkedList
    + SearchEmail(String e): LinkedList
    + SearchDOB(String d): LinkedList
    + searchAddress(String address): LinkedList
    + SearchPhone(String p): Contact
    + printName(LinkedList list)
    + {static}printBSTofallcontacts(BSTNode node)
    + {static}printLinkedListofallcontacts(LinkedList L)
    + printLinkedListOfEvents(LinkedList List)
    + GetEventsInContact(String n): LinkedList
    + GetContactInEvent(String n): LinkedList
    + {static}PrintEvenInfo(String title)
    + isConflict(Event e, Contact c)
    + scheduleEvent(Event e, String contactName)
    + scheduleAppointment(Event e, String contactName)
}

BST "1" *-- "0..*" BSTNode : contains
Contact "1" *-- "1" LinkedList : has
Event "1" *-- "1" LinkedList : contains
LinkedList "1" *-- "0..*" Node : has
Phonebook "1" -- "1" BST : manages
Phonebook "1" -- "1" LinkedList : manages
